##############################################################################
# Copyright (c) 2017 ZTE corporation and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################
heat_template_version: 2015-04-30

description: >
  Used to run VMs with DPDK pktgen

parameters:
  image:
    type: string
    description: Name of the image
    default: yardstick-dpdk-image

  timeout:
    type: number
    description: Timeout in seconds for WaitCondition, depends on your image and environment
    default: 900

  external_net_name:
    type: string
    description: Name of the external network which management network will connect to
    default: admin_floating_net

resources:
  flavor:
    type: OS::Nova::Flavor
    properties:
      ram: 4096
      vcpus: 4
      disk: 4
      extra_specs: {"hw:mem_page_size": "any"}

  network:
    type: OS::Neutron::Net
    properties:
      name: dpdk_net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      name: dpdk_subnet
      ip_version: 4
      cidr: 172.16.101.0/24
      network: { get_resource: network }

  management_router:
    type: OS::Neutron::Router
    properties:
      name: management_router
      external_gateway_info:
        network: { get_param: external_net_name }

  management_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: management_router }
      subnet: { get_resource: subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_net_name }

  floating_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: {get_resource: dpdk_vm}

  keypair:
    type: OS::Nova::KeyPair
    properties:
      name: yardstick-key
      public_key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD0RkXfW6pksd1cZmXuvXZF/Mlqqq3ahIGcGoULOC97XMpu0vdxMpcUwdjwGqMwEXTVyfHidu0l99bLqOCpSUKCmbWx3ONJ+1kqFx4HwsKEWLiyDYqsuMrDeZT1eFjC5avCoTcrIw2wq5NaBb00lDGagNZOeopaL5YIa4+PizEY23+cir24D67NU21Fg3JE92AIeGlNa4j66L3a+lL0hZq74Dilmp42wm4GsbplRO6KJfyaraowHb1X+TmhCjBgHk6M/OJ9yPAroZyJNcwjMAuuxhAYWRuT3SdbnoUR0RG2VhfDh0qNid7vOqLbhKPeaLLFmzkN+9w3WdCp6LbSYt87 yardstick@yardstick.opnfv.org

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: { get_param: timeout }

  dpdk_vm:
    type: OS::Nova::Server
    depends_on: [subnet, keypair, flavor]
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: image }
      flavor: { get_resource: flavor }
      key_name: {get_resource: keypair}
      networks:
        - network: { get_resource: network }
      config_drive: True
      user_data_format : RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            cat <<'CEOF' > /tmp/dpdk_post_build.sh
            CPU_ARCH="$(uname -m)"
            if [ "$CPU_ARCH" == "aarch64" ]; then
                TARGET="arm64-thunderx-linuxapp-gcc"
                MODULE="vfio-pci"
                echo "Building for ARM"
            else
                TARGET="x86_64-native-linuxapp-gcc"
                MODULE="uio"
                echo "Building for x86"
            fi
            export RTE_SDK=/dpdk
            export RTE_TARGET=$TARGET           
            
            cd /dpdk/
            make config T=$TARGET O=$TARGET
                        
            cd $TARGET
            # switch to static libraries so that pktgen can compile
            sed -i 's/CONFIG_RTE_BUILD_SHARED_LIB=\(.*\)/CONFIG_RTE_BUILD_SHARED_LIB=n/g' .config
            make -j 8
            if [ "$CPU_ARCH" == "aarch64" ]; then
                echo "ARM"
                sudo modprobe -r vfio_pci
                sudo modprobe -r vfio
                sudo modprobe -r vfio_iommu_type1
                sudo modprobe vfio enable_unsafe_noiommu_mode=Y
                sudo modprobe vfio-pci
            else
                echo "x86"
                modprobe $MODULE
                insmod $RTE_SDK/$RTE_TARGET/kmod/igb_uio.ko
                insmod $RTE_SDK/$RTE_TARGET/kmod/rte_kni.ko
                cd /pktgen-dpdk
                make RTE_SDK=$RTE_SDK
                echo "PKTGEN BUILT"
            fi
            rm -rf /var/lib/cloud/instances
            echo "rm succesfull"
            ls $RTE_SDK/$RTE_TARGET
            $NOTIFY --data-binary '{"status": "SUCCESS"}'
            CEOF
            chmod +x /tmp/dpdk_post_build.sh
            echo "chmod"
            bash /tmp/dpdk_post_build.sh &
          params:
            $NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }

outputs:
  vm_uuid:
    description: uuid of the VM
    value: { get_attr: [ dpdk_vm, show,id ] }
